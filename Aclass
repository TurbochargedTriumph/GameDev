import pygame.mixer
from ursina import *
dfcdfadfnqfjqnfc;qjnfufkfhqhfq'pifhfhgfugqfqwdidhwidhwkdhгвгцв

class CarGame(Ursina):
    def __init__(self):
        super().__init__()
        self.camera.orthographic = True
        self.camera.fov = 40
        pygame.mixer.init()
        pygame.mixer.music.load('noplaynogay.mp3')
        pygame.mixer.music.play(-1)

        self.lives = 3
        self.invulnerable = False

        self.car = Car()
        self.road1 = Road(z=1)
        self.road2 = Road(z=1, y=15)
        self.pair = [self.road1, self.road2]
        self.enemies = []

        self.new_enemy()

        self.collision_this_frame = False

        self.lives_text = Text(text=f'Lives: {self.lives}', origin=(0, 1), y=-.4, color=color.black)
        self.game_over_text = Text(text='Game Over', origin=(0, 0), y=-.4, color=color.black, enabled=False)

    def new_enemy(self):
        val = random.uniform(-2, 2)
        new = Enemy(car=self.car, x=2 * val, y=25)
        self.enemies.append(new)
        invoke(self.new_enemy, delay=0.5)

    def handle_collisions(self):
        for enemy in self.enemies:
            if self.car.intersects(enemy).hit and not self.collision_this_frame and not self.invulnerable:
                self.car.shake()
                self.lives -= 1
                self.lives_text.text = f'Lives: {self.lives}'
                if self.lives == 0:
                    self.game_over_text.enabled = True
                    self.paused = True

                self.invulnerable = True
                invoke(self.set_invulnerable_false, delay=1.5)
                self.collision_this_frame = True
                return
        self.collision_this_frame = False

    def set_invulnerable_false(self):
        self.invulnerable = False

    def update(self):
        self.car.update()
        for road in self.pair:
            road.update()
        for enemy in self.enemies:
            enemy.update()
            if enemy.y < -10:
                self.enemies.remove(enemy)
                destroy(enemy)

        self.handle_collisions()
        if self.invulnerable:
            self.car.color = color.blue
        else:
            self.car.color = color.white


class Car(Entity):
    def __init__(self, **kwargs):
        super().__init__(
            model='quad',
            texture='assets/car2.png',
            collider='box',
            scale=(2, 1),
            rotation_z=-90,
            **kwargs
        )

    def update(self):
        self.x -= held_keys['a'] * 5 * time.dt
        self.x += held_keys['d'] * 5 * time.dt

        if held_keys['w']:
            if self.y + 5 * time.dt <= 10:
                self.y += 5 * time.dt
        if held_keys['s']:
            if self.y - 6 * time.dt >= -10:
                self.y -= 6 * time.dt


class Road(Entity):
    def __init__(self, **kwargs):
        super().__init__(
            model='quad',
            texture='assets/roadnew.png',
            scale=15,
            **kwargs
        )

    def update(self):
        self.y -= 6 * time.dt
        if self.y < -15:
            self.y += 30


class Enemy(Entity):
    def __init__(self, **kwargs):
        super().__init__(
            model='quad',
            texture='assets/car3.png',
            color=color.random_color(),
            rotation_z=90 if random.uniform(-2, 2) < 0 else -90,
            **kwargs
        )

    def update(self):
        if self.x < 0:
            self.y -= 10 * time.dt
        else:
            self.y -= 5 * time.dt


if __name__ == '__main__':
    app = CarGame()
    app.run()
